{
  "address": "0xaD21fAa092522e5D9f6B5768d25Eb8dF1126Fe4c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "s_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x18b914e4765a85ad6e862a0d9a4ff56d26ba55f498e62612b14d5469c06229fd",
  "receipt": {
    "to": null,
    "from": "0xC881B26DE56FAF8A008d7a5563CCfdD0b68b1965",
    "contractAddress": "0xaD21fAa092522e5D9f6B5768d25Eb8dF1126Fe4c",
    "transactionIndex": 9,
    "gasUsed": "1104208",
    "logsBloom": "0x
    "blockHash": "0x1d2fdafa4a3bcb2cab82c2b4a5da895393058fb5e6c4828ff09b9ad4d8204cf6",
    "transactionHash": "0x18b914e4765a85ad6e862a0d9a4ff56d26ba55f498e62612b14d5469c06229fd",
    "logs": [],
    "blockNumber": 3326972,
    "cumulativeGasUsed": "2478219",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 3,
  "solcInputHash": "6bc5049261159a5e9a23d404f9b10b37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\"; // import library\\n\\n//Error Codes\\nerror FundMe__NotOwner();\\n\\ncontract FundMe {\\n\\n// Type declarations\\n// State Variables\\n// Events\\n// Modifiers\\n// Functions\\n\\n    using PriceConverter for uint256; // declare library for dataType.\\n\\n    uint256 public constant MINIMUM_USD = 50 * 1e18; // * 1e18 cuz require statement we are comparing with eth in \\\"wei\\\".\\n  \\n    address[] public s_funders;\\n    mapping(address => uint256)public s_addressToAmountFunded;\\n\\n    address private immutable i_owner; \\n\\n    AggregatorV3Interface public s_priceFeed;\\n\\n    // modifier onlyOwner {\\n    //     require(msg.sender == i_owner, \\\"Sender is not Owner!\\\");\\n    //     _; // This _; means run require the top code first (in this case, is the require statement), then the remaining code.\\n        \\n    //     // if it is:\\n    //     // \\n    //     // _;\\n    //     // require(msg.sender == owner, \\\"Sender is not Owner!\\\");\\n\\n    //     // then it means runs the func() code first, then run the \\\"require\\\" statement. (which in this case is not efficient.)\\n    // }\\n\\n    modifier onlyOwner {\\n        if(msg.sender != i_owner) {revert FundMe__NotOwner();}\\n        _;\\n    }\\n\\n// // Order of Functions ---\\n// constructor\\n// receive function (if exists)\\n// fallback function (if exists)\\n// external -  Cannot be accessed internally, only externally\\n// public - all can access\\n// internal - only this contract and contracts deriving from it can access\\n// private - can be accessed only from this contract\\n// view/pure\\n\\n    constructor(address s_priceFeedAddress){\\n        i_owner = msg.sender; // so the owner will be the person deploying this contract\\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\\n    }\\n\\n    // But what if someone send this contract ETH without calling the \\\"fund\\\" function, then it is not recorded, and we cannot credit and keep track of them ? \\n    // But there is a where such that when people \\\"send\\\" money, or people call a function that doesn't exist, for us to trigger some code.\\n    // 1. recieve()\\n    // 2. fallback()\\n    \\n    receive() external payable {\\n        fund();\\n    }\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    // In this case, if ppl send $$ without using the fund() function, the recieve and fallback function will still trigger can automatically call the fund() function.\\n\\n    function fund() public payable {\\n    // want to be able to set a minimum fund amt in USD\\n    // 1. How to we send ETH to this address\\n    require ( msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"you neeed to spend more ETH!\\\"); // means if they send, it will have to me more than 1ETH.data, else it will revert.\\n    s_funders.push(msg.sender);\\n    s_addressToAmountFunded[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n\\n        // to do checks for owner, we can do this: ( but in this case, we use modifier, so we don't need to copy and paste all of these code)\\n        // require(msg.sender == owner); //check to make sure if it is called by owner.\\n\\n        for (uint256 i = 0; i < s_funders.length; i++){\\n            address funder = s_funders[i];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        //reset array\\n        s_funders = new address[](0); // (0) means starting with 0 element inside\\n        \\n        // // Withdraw the funds ( 3 different ways ) \\n        // // 1. Transfer \\n        // payable(msg.sender).transfer(address(this).balance);\\n\\n        // // 2. Send \\n        // // payable(msg.sender).send(address(this).balance); // if it is just like this, if it fails, it will not revert, and won't get money sent.\\n        // // therefore we need to use require to revert here.\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess,\\\"Send Failed\\\");\\n\\n        // 3. Call (most powerful, can call any function even without ABI)\\n        // call method return 2 values!\\n        // (bool callSuccess, bytes memory dataReturned ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        // but since we are not calling any function, and don't need the dataReturned, we can just do this\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\"); \\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address [] memory funders = s_funders;\\n        // mappings can't be in memory tho. \\n\\n        for (uint256 i = 0; i < funders.length; i++){\\n            address funder = funders[i];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0); //reset all to 0\\n        (bool success,) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    // VIEW/PURE (GETTERS)\\n\\n    function getOwner() public view returns(address) {\\n        return i_owner;\\n    }\\n\\n    function getFunders(uint256 index) public view returns(address){\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns(uint256){\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns(AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n\\n}\",\"keccak256\":\"0x2861a262f95e827e61187a5ff530826f957eb2a83d240a0a9dd5e760c430c103\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\"; //import directly from Github, //remix knows that @chainlink/contracts referrs to the NPM package \\\"@chainlink/contracts\\\"\\n\\nlibrary PriceConverter {\\n\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) {  \\n    \\n        // (uint80 roundId, int price, uint startedAt, uint timestamp, uint answeredInRound) = priceFeed.latestRoundData();\\n        (,int256 price,,, ) = priceFeed.latestRoundData();\\n        // Eth price given in terms of USD (8 decimals )\\n        // uint256 decimals = priceFeed.decimals();\\n        //since wei is 1e18, and decimals is \\\"8\\\" we need to * 1e10.\\n        return uint256(price * 1e10);\\n    }\\n\\n  \\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount)/1e18;\\n        return ethAmountInUsd;\\n    }\\n \\n}\",\"keccak256\":\"0xc5aade6e5ea6432b1e44e4344d57eaec5b0fb92740e3185b0a540f94651e4de4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200142038038062001420833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c61129a620001866000396000818161048201528181610710015281816107600152610956015261129a6000f3fe6080604052600436106100a05760003560e01c806354861af71161006457806354861af7146101a55780636b69a592146101e2578063893d20e81461020d5780639e87a5cd14610238578063b60d428814610263578063be2693f01461026d576100af565b80630343fb25146100b95780630ec3b027146100f65780631bf6132d146101215780633a7b6c741461015e5780633ccfd60b1461019b576100af565b366100af576100ad610277565b005b6100b7610277565b005b3480156100c557600080fd5b506100e060048036038101906100db9190610bd2565b6103b2565b6040516100ed9190610c18565b60405180910390f35b34801561010257600080fd5b5061010b6103fb565b6040516101189190610c92565b60405180910390f35b34801561012d57600080fd5b5061014860048036038101906101439190610bd2565b610421565b6040516101559190610c18565b60405180910390f35b34801561016a57600080fd5b5061018560048036038101906101809190610cd9565b610439565b6040516101929190610d15565b60405180910390f35b6101a3610480565b005b3480156101b157600080fd5b506101cc60048036038101906101c79190610cd9565b6106c0565b6040516101d99190610d15565b60405180910390f35b3480156101ee57600080fd5b506101f76106ff565b6040516102049190610c18565b60405180910390f35b34801561021957600080fd5b5061022261070c565b60405161022f9190610d15565b60405180910390f35b34801561024457600080fd5b5061024d610734565b60405161025a9190610c92565b60405180910390f35b61026b610277565b005b61027561075e565b005b6802b5e3af16b18800006102b6600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109ec90919063ffffffff16565b10156102f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ee90610d8d565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103a99190610ddc565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b600080828154811061044e5761044d610e32565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610505576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156105b057600080828154811061052a57610529610e32565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806105a890610e61565b915050610508565b50600067ffffffffffffffff8111156105cc576105cb610eaa565b5b6040519080825280602002602001820160405280156105fa5781602001602082028036833780820191505090505b5060009080519060200190610610929190610ac8565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161063790610f0a565b60006040518083038185875af1925050503d8060008114610674576040519150601f19603f3d011682016040523d82523d6000602084013e610679565b606091505b50509050806106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b490610f6b565b60405180910390fd5b50565b600081815481106106d057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107e3576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561086657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161081c575b5050505050905060005b81518110156108f157600082828151811061088e5761088d610e32565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806108e990610e61565b915050610870565b50600067ffffffffffffffff81111561090d5761090c610eaa565b5b60405190808252806020026020018201604052801561093b5781602001602082028036833780820191505090505b5060009080519060200190610951929190610ac8565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161099890610f0a565b60006040518083038185875af1925050503d80600081146109d5576040519150601f19603f3d011682016040523d82523d6000602084013e6109da565b606091505b50509050806109e857600080fd5b5050565b6000806109f883610a28565b90506000670de0b6b3a76400008583610a119190610f8b565b610a1b9190611014565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a7157600080fd5b505afa158015610a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa991906110d2565b5050509150506402540be40081610ac0919061114d565b915050919050565b828054828255906000526020600020908101928215610b41579160200282015b82811115610b405782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ae8565b5b509050610b4e9190610b52565b5090565b5b80821115610b6b576000816000905550600101610b53565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b9f82610b74565b9050919050565b610baf81610b94565b8114610bba57600080fd5b50565b600081359050610bcc81610ba6565b92915050565b600060208284031215610be857610be7610b6f565b5b6000610bf684828501610bbd565b91505092915050565b6000819050919050565b610c1281610bff565b82525050565b6000602082019050610c2d6000830184610c09565b92915050565b6000819050919050565b6000610c58610c53610c4e84610b74565b610c33565b610b74565b9050919050565b6000610c6a82610c3d565b9050919050565b6000610c7c82610c5f565b9050919050565b610c8c81610c71565b82525050565b6000602082019050610ca76000830184610c83565b92915050565b610cb681610bff565b8114610cc157600080fd5b50565b600081359050610cd381610cad565b92915050565b600060208284031215610cef57610cee610b6f565b5b6000610cfd84828501610cc4565b91505092915050565b610d0f81610b94565b82525050565b6000602082019050610d2a6000830184610d06565b92915050565b600082825260208201905092915050565b7f796f75206e6565656420746f207370656e64206d6f7265204554482100000000600082015250565b6000610d77601c83610d30565b9150610d8282610d41565b602082019050919050565b60006020820190508181036000830152610da681610d6a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610de782610bff565b9150610df283610bff565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e2757610e26610dad565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e6c82610bff565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e9f57610e9e610dad565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ef4600083610ed9565b9150610eff82610ee4565b600082019050919050565b6000610f1582610ee7565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f55600b83610d30565b9150610f6082610f1f565b602082019050919050565b60006020820190508181036000830152610f8481610f48565b9050919050565b6000610f9682610bff565b9150610fa183610bff565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fda57610fd9610dad565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061101f82610bff565b915061102a83610bff565b92508261103a57611039610fe5565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61106481611045565b811461106f57600080fd5b50565b6000815190506110818161105b565b92915050565b6000819050919050565b61109a81611087565b81146110a557600080fd5b50565b6000815190506110b781611091565b92915050565b6000815190506110cc81610cad565b92915050565b600080600080600060a086880312156110ee576110ed610b6f565b5b60006110fc88828901611072565b955050602061110d888289016110a8565b945050604061111e888289016110bd565b935050606061112f888289016110bd565b925050608061114088828901611072565b9150509295509295909350565b600061115882611087565b915061116383611087565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156111a2576111a1610dad565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156111df576111de610dad565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561121c5761121b610dad565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561125957611258610dad565b5b82820290509291505056fea2646970667358221220aa10e7bf98ce53a987b1084a5288cfe9d81f6044178e8710baaf4fba56840df964736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100a05760003560e01c806354861af71161006457806354861af7146101a55780636b69a592146101e2578063893d20e81461020d5780639e87a5cd14610238578063b60d428814610263578063be2693f01461026d576100af565b80630343fb25146100b95780630ec3b027146100f65780631bf6132d146101215780633a7b6c741461015e5780633ccfd60b1461019b576100af565b366100af576100ad610277565b005b6100b7610277565b005b3480156100c557600080fd5b506100e060048036038101906100db9190610bd2565b6103b2565b6040516100ed9190610c18565b60405180910390f35b34801561010257600080fd5b5061010b6103fb565b6040516101189190610c92565b60405180910390f35b34801561012d57600080fd5b5061014860048036038101906101439190610bd2565b610421565b6040516101559190610c18565b60405180910390f35b34801561016a57600080fd5b5061018560048036038101906101809190610cd9565b610439565b6040516101929190610d15565b60405180910390f35b6101a3610480565b005b3480156101b157600080fd5b506101cc60048036038101906101c79190610cd9565b6106c0565b6040516101d99190610d15565b60405180910390f35b3480156101ee57600080fd5b506101f76106ff565b6040516102049190610c18565b60405180910390f35b34801561021957600080fd5b5061022261070c565b60405161022f9190610d15565b60405180910390f35b34801561024457600080fd5b5061024d610734565b60405161025a9190610c92565b60405180910390f35b61026b610277565b005b61027561075e565b005b6802b5e3af16b18800006102b6600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109ec90919063ffffffff16565b10156102f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ee90610d8d565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103a99190610ddc565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b600080828154811061044e5761044d610e32565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610505576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156105b057600080828154811061052a57610529610e32565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806105a890610e61565b915050610508565b50600067ffffffffffffffff8111156105cc576105cb610eaa565b5b6040519080825280602002602001820160405280156105fa5781602001602082028036833780820191505090505b5060009080519060200190610610929190610ac8565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161063790610f0a565b60006040518083038185875af1925050503d8060008114610674576040519150601f19603f3d011682016040523d82523d6000602084013e610679565b606091505b50509050806106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b490610f6b565b60405180910390fd5b50565b600081815481106106d057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107e3576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561086657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161081c575b5050505050905060005b81518110156108f157600082828151811061088e5761088d610e32565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806108e990610e61565b915050610870565b50600067ffffffffffffffff81111561090d5761090c610eaa565b5b60405190808252806020026020018201604052801561093b5781602001602082028036833780820191505090505b5060009080519060200190610951929190610ac8565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161099890610f0a565b60006040518083038185875af1925050503d80600081146109d5576040519150601f19603f3d011682016040523d82523d6000602084013e6109da565b606091505b50509050806109e857600080fd5b5050565b6000806109f883610a28565b90506000670de0b6b3a76400008583610a119190610f8b565b610a1b9190611014565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a7157600080fd5b505afa158015610a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa991906110d2565b5050509150506402540be40081610ac0919061114d565b915050919050565b828054828255906000526020600020908101928215610b41579160200282015b82811115610b405782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ae8565b5b509050610b4e9190610b52565b5090565b5b80821115610b6b576000816000905550600101610b53565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b9f82610b74565b9050919050565b610baf81610b94565b8114610bba57600080fd5b50565b600081359050610bcc81610ba6565b92915050565b600060208284031215610be857610be7610b6f565b5b6000610bf684828501610bbd565b91505092915050565b6000819050919050565b610c1281610bff565b82525050565b6000602082019050610c2d6000830184610c09565b92915050565b6000819050919050565b6000610c58610c53610c4e84610b74565b610c33565b610b74565b9050919050565b6000610c6a82610c3d565b9050919050565b6000610c7c82610c5f565b9050919050565b610c8c81610c71565b82525050565b6000602082019050610ca76000830184610c83565b92915050565b610cb681610bff565b8114610cc157600080fd5b50565b600081359050610cd381610cad565b92915050565b600060208284031215610cef57610cee610b6f565b5b6000610cfd84828501610cc4565b91505092915050565b610d0f81610b94565b82525050565b6000602082019050610d2a6000830184610d06565b92915050565b600082825260208201905092915050565b7f796f75206e6565656420746f207370656e64206d6f7265204554482100000000600082015250565b6000610d77601c83610d30565b9150610d8282610d41565b602082019050919050565b60006020820190508181036000830152610da681610d6a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610de782610bff565b9150610df283610bff565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e2757610e26610dad565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e6c82610bff565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e9f57610e9e610dad565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ef4600083610ed9565b9150610eff82610ee4565b600082019050919050565b6000610f1582610ee7565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f55600b83610d30565b9150610f6082610f1f565b602082019050919050565b60006020820190508181036000830152610f8481610f48565b9050919050565b6000610f9682610bff565b9150610fa183610bff565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fda57610fd9610dad565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061101f82610bff565b915061102a83610bff565b92508261103a57611039610fe5565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61106481611045565b811461106f57600080fd5b50565b6000815190506110818161105b565b92915050565b6000819050919050565b61109a81611087565b81146110a557600080fd5b50565b6000815190506110b781611091565b92915050565b6000815190506110cc81610cad565b92915050565b600080600080600060a086880312156110ee576110ed610b6f565b5b60006110fc88828901611072565b955050602061110d888289016110a8565b945050604061111e888289016110bd565b935050606061112f888289016110bd565b925050608061114088828901611072565b9150509295509295909350565b600061115882611087565b915061116383611087565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156111a2576111a1610dad565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156111df576111de610dad565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561121c5761121b610dad565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561125957611258610dad565b5b82820290509291505056fea2646970667358221220aa10e7bf98ce53a987b1084a5288cfe9d81f6044178e8710baaf4fba56840df964736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 70,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}